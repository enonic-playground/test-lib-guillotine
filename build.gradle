plugins {
	id 'java'
	id "com.github.node-gradle.node" version '3.3.0'
	id 'com.enonic.xp.app' version '3.1.0'
}

app {
	name = "${appName}"
	displayName = "${appDisplayName}"
	vendorName = "${vendorName}"
	vendorUrl = "${vendorUrl}"
	systemVersion = "${xpVersion}"
}

dependencies {
	implementation "com.enonic.xp:portal-api:${xpVersion}"

	include "com.enonic.xp:lib-app:${xpVersion}"
	include "com.enonic.xp:lib-content:${xpVersion}"
	include "com.enonic.xp:lib-context:${xpVersion}"
	include "com.enonic.xp:lib-node:${xpVersion}"
	include "com.enonic.xp:lib-project:${xpVersion}"
	include "com.enonic.xp:lib-repo:${xpVersion}"
	include "com.enonic.xp:lib-schema:${xpVersion}"
	include "com.enonic.xp:lib-task:${xpVersion}"
	include "com.enonic.xp:lib-value:${xpVersion}"

	include 'com.enonic.lib:lib-graphql:2.0.1'
	include 'com.enonic.lib:lib-guillotine:6.1.0-B2'
	include 'com.enonic.lib:lib-router:2.1.0'
	include 'com.enonic.lib:lib-static:1.0.2'

	// implementation "com.enonic.xp:script-api:${xpVersion}"
	// include "com.enonic.xp:lib-event:${xpVersion}"
	// include "com.enonic.xp:lib-portal:${xpVersion}"
	// include "com.enonic.lib:lib-mustache:2.0.0"
	// include "com.enonic.xp:lib-auth:${xpVersion}"
	// include "com.enonic.xp:lib-i18n:${xpVersion}"
	// include "com.enonic.xp:lib-io:${xpVersion}"
	// include "com.enonic.xp:lib-mail:${xpVersion}"
	// include "com.enonic.xp:lib-websocket:${xpVersion}"
	// include "com.enonic.lib:lib-mustache:2.0.0"
	// include "com.enonic.lib:lib-util:3.0.0"
}

repositories {
	mavenLocal()
	mavenCentral()
	xp.enonicRepo()
}

node {
	download = true
	version = '18.13.0'
}

task npmInstallForce( type: NpmTask ) {
	description = 'Update all project node dependencies'
	args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
	delete 'node_modules'
}

task clientWebpack( type: NodeTask, dependsOn: npmInstall ) {
	environment = [ 'NODE_ENV': nodeEnvironment() ]
	args = [ '--config', 'webpack.client.config.js', '--color' ]
	description = 'Build UI resources (js, css, etc).'
	inputs.dir 'src/main'
	outputs.dir "${buildDir}/resources/main"
	script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task webappStaticWebpack( type: NodeTask, dependsOn: npmInstall ) {
	environment = [ 'NODE_ENV': nodeEnvironment() ]
	args = [ '--config', 'webpack.webapp.static.config.js', '--color' ]
	description = 'Build Webapp Static Assets (tsx, jsx, etc).'
	inputs.dir 'src/main/resources/webapp/static'
	outputs.dir "${buildDir}/resources/main/webapp/static"
	script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task serverWebpack( type: NodeTask, dependsOn: npmInstall ) {
	environment = [ 'NODE_ENV': nodeEnvironment() ]
	// args = [ '--config', 'webpack.server.config.babel.js', '--color', '--hide-modules' ]
	args = [ '--config', 'webpack.server.config.js', '--color' ]
	description = 'Build server JS.'
	inputs.dir 'src/main'
	outputs.dir "${buildDir}/resources/main"
	script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

processResources {
	include '**/*'
	exclude '**/.gitkeep'
	exclude '**/tsconfig.*.json'
	exclude '**/*.es'
	exclude '**/*.es6'
	exclude '**/*.jsx'
	exclude '**/*.ts'
	exclude '**/*.tsx'
	exclude 'assets/js/**/*.js'
	include 'assets/js/bundle.js'
	exclude 'assets/styles/**/*.less'
	exclude 'assets/styles/**/*.sass'
	exclude 'assets/styles/**/*.scss'
	includeEmptyDirs false
}

jar {
	exclude 'assets/styles/**/*.less'
	exclude 'assets/styles/**/*.sass'
	exclude 'assets/styles/**/*.scss'
	exclude 'assets/styles/**/*.js'

	dependsOn += clientWebpack
	dependsOn += serverWebpack
	dependsOn += webappStaticWebpack
}

jar.outputs.dir "${buildDir}/resources/main"

def nodeEnvironment() {
	def environments = [ prod : 'production', dev: 'development' ]
	def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
	return nodeEnv != null ? nodeEnv : 'production'
}
